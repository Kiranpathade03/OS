Q1) Add the following functionalities in your program
 a) Accept Available
 b) Display Allocation, Max 
c) Display the contents of need matrix 
d) Display Available Process Allocation 
Process                   Allocation                   Max
                               A    B    C                    A    B    C
P0                           0     1     0                  7     5    3
P1                           2     0     0                  3     2    2
P2                           3     0     2                  9     0    2
P3                           2     1     1                  2     2    2
P4                           0     0     2                  4     3    3

#include<stdio.h>
int n,m,i,j,k,flag,safe;
int a[50][50],av[15],max[50][50],finish[10],need[50][50],req[10];
char s[50],str[5];
void get_data()
{
 printf("\nEnter number of processes : ");
 scanf("%d",&n);
 printf("\nEnter number of resources : ");
 scanf("%d",&m);
 printf("\n Enter allocation matrix : ");
for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 scanf("%d",&a[i][j]);
 }//for
 }//for
 printf("\n Enter MAX matrix");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 scanf("%d",&max[i][j]);
 }//for
 }//for
 printf("\nEnter Available Array : ");
 for(i=0;i<m;i++)
 scanf("%d",&av[i]);
 for(i=0;i<n;i++)
 finish[i]=0;
}//get_data
void put_data()
{
 printf("\nAllocation matrix is.......\n");
for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",a[i][j]);
 }//for
 printf("\n");
 }//for
 printf("\nMax matrix is.......\n");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",max[i][j]);
 }//for
 printf("\n");
 }//for
 printf("\nAvailable Array is.....\n");
 for(i=0;i<m;i++)
 printf("%d\t",av[i]);
 printf("\nFinish Array\n");
 for(i=0;i<n;i++)
 printf("%d\t",finish[i]);
}
void calc_need()
{
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 need[i][j]=max[i][j]-a[i][j];
 }
 }
 printf("\nNeed array is.....\n");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",need[i][j]);
 }
 printf("\n");
 }
}//calc_need
int check_need(int i)
{
 flag=0;
 for(j=0;j<m;j++)
 {

if(need[i][j] > av[j])
 {
 flag=1;
 break;
 }//if
 }//for
 return flag;
}//check_need
void safe_state()
{
 for(i=0;i<n;i++)
 finish[i]=0;
 strcpy(s,"\0");
 for(i=0;i<n;i++)
 {
 if(check_need(i)==0)
 {
 for(k=0;k<m;k++)
 av[k]=av[k]+a[i][k];
 sprintf(str,"%d",i);
 strcat(s,"P");
 strcat(s,str);
 strcat(s," ");
 puts(s);
}//if
 else
 finish[i]=1;
 }//for
}//safe_state
void main()
{
int p,f;
f=0;
get_data();
put_data();
calc_need();
safe_state();
for(k=0;k<n;k++)
{
 if(finish[k]==1)
 {
 if(check_need(k)==0)
 {
 for(p=0;p<m;p++)
 av[p]=av[p]+a[k][p];
 sprintf(str,"%d",k);
 strcat(s,"P");
 strcat(s,str);
strcat(s," ");
 finish[k]=0;
 }//if
 else
 f=1;
 }//if
}//for
if(f==0)
{
 printf("System is in safe state");
 printf("\nSafe sequence\n");
 puts(s);
}//if
else
 printf("System is not in safe state");
 //res_req();
 put_data();
}//main
**************************************************************************************************************************************************************************
Q2 )Modify above program so as to include the following: 
a) Accept Request for a process 
b) Resource request algorithm 
c) Safety algorithm 
Consider a system with ‘n’ processes and ‘m’ resource types. Accept number of instances for every resource type. For each process accept the allocation and maximum requirement matrices. Write a program to display the contents of need matrix and to check if the given request of a process can be granted immediately or not

#include<stdio.h>
int n,m,i,j,k,flag,safe;
int a[50][50],av[15],max[50][50],finish[10],need[50][50],req[10];
char s[50],str[5];
void get_data()
{
 printf("\nEnter number of processes : ");
 scanf("%d",&n);
 printf("\nEnter number of resources : ");
 scanf("%d",&m);
 printf("\n Enter allocation matrix : ");
for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 scanf("%d",&a[i][j]);
 }//for
 }//for
 printf("\n Enter MAX matrix");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 scanf("%d",&max[i][j]);
 }//for
 }//for
 printf("\nEnter Available Array : ");
 for(i=0;i<m;i++)
 scanf("%d",&av[i]);
 for(i=0;i<n;i++)
 finish[i]=0;
}//get_data
void put_data()
{
 printf("\nAllocation matrix is.......\n");
for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",a[i][j]);
 }//for
 printf("\n");
 }//for
 printf("\nMax matrix is.......\n");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",max[i][j]);
 }//for
 printf("\n");
 }//for
 printf("\nAvailable Array is.....\n");
 for(i=0;i<m;i++)
 printf("%d\t",av[i]);
 printf("\nFinish Array\n");
 for(i=0;i<n;i++)
 printf("%d\t",finish[i]);
}
void calc_need()
{
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 need[i][j]=max[i][j]-a[i][j];
 }
 }
 printf("\nNeed array is.....\n");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",need[i][j]);
 }
 printf("\n");
 }
}//calc_need
int check_need(int i)
{
 flag=0;
 for(j=0;j<m;j++)
 {
if(need[i][j] > av[j])
 {
 flag=1;
 break;
 }//if
 }//for
 return flag;
}//check_need
void safe_state()
{
 for(i=0;i<n;i++)
 finish[i]=0;
 strcpy(s,"\0");
 for(i=0;i<n;i++)
 {
 if(check_need(i)==0)
 {
 for(k=0;k<m;k++)
 av[k]=av[k]+a[i][k];
 sprintf(str,"%d",i);
 strcat(s,"P");
 strcat(s,str);
 strcat(s," ");
 puts(s);
}//if
 else
 finish[i]=1;
 }//for
}//safe_state
void res_req()
{
safe=0;
printf("Enter the process number\n");
scanf("%d",&i);
printf("Enter the request\n");
for(k=0;k<m;k++)
 scanf("%d",&req[k]);
 for(k=0;k<m;k++)
 {
 if(req[k] > need[i][k] || req[k] > av[k])
 {
 safe=1;
 break;
 }
 }
printf("\nEnter available array");
for(j=0;j<m;j++)
scanf("%d",&av[j]);
if(safe==0)
 {
 printf("The request can be granted \n");
 for(k=0;k<m;k++)
 {
 av[k]=av[k]-req[k];
 a[i][k]=a[i][k]+req[k];
 need[i][k]=need[i][k]-req[k];
 }
 printf("\nNeed array is.....\n");
 for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 printf("%d\t",need[i][j]);
 }
 printf("\n");
 }
 }//if
else
printf("\nThe request can not be granted");
}//res_req
void main()
{
int p,f;
f=0;
get_data();
put_data();
calc_need();
aaa: safe_state();
for(k=0;k<n;k++)
{
 if(finish[k]==1)
 {
 if(check_need(k)==0)
 {
 for(p=0;p<m;p++)
 av[p]=av[p]+a[k][p];
 sprintf(str,"%d",k);
 strcat(s,"P");
 strcat(s,str);
 strcat(s," ");
 finish[k]=0;
 }//if
 else
 f=1;
 }//if
}//for
if(f==0)
{
 printf("System is in safe state");
 printf("\nSafe sequence\n");
 puts(s);
}//if
else
 printf("System is not in safe state");
 res_req();
 put_data();
 if (safe==0)
 goto aaa;
}//main
**************************************************************************************************************************************************
Q3) Write a program to simulate Sequential(Contiguous)file allocation method. Assume disk with n number of books. Give value of n as input. Write menu driver program with menu options as mentioned above and implement each option.
-Show Bit Vector
-Create New File
-Show Directory
-Delete File
-Exit
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
#define MAX_BLOCKS 1000 
int bit_vector[MAX_BLOCKS]; 
void initialize(int n) { 
 srand(time(NULL)); // Seed the random number generator with the current time 
 for (int i = 0; i < n; i++) { 
 if (rand() % 2 == 0) { 
 bit_vector[i] = 1; // Mark block as allocated 
 } else { 
 bit_vector[i] = 0; // Mark block as free 
 } 
 } 
} 
void show_bit_vector(int n) { 
 printf("Block Number\tStatus\n"); 
 for (int i = 0; i < n; i++) { 
 printf("%d\t\t", i); 
 if (bit_vector[i] == 1) { 
 printf("Allocated\n"); 
 } else { 
 printf("Free\n"); 
 } 
 } 
} 
void create_new_file(int n) { 
 int start_block, num_blocks; 
 printf("Enter the starting block number: "); 
 scanf("%d", &start_block);
printf("Enter the number of blocks needed: "); 
 scanf("%d", &num_blocks); 
 int i; 
 for (i = start_block; i < start_block + num_blocks; i++) { 
 if (i >= n || bit_vector[i] == 1) { 
 printf("Error: Cannot allocate file in the specified blocks.\n"); 
 break; 
 } 
 } 
 if (i == start_block + num_blocks) { 
 printf("File created successfully.\n"); 
 for (i = start_block; i < start_block + num_blocks; i++) { 
 bit_vector[i] = 1; // Mark blocks as allocated 
 } 
 } 
} 
void show_directory(int n) { 
 printf("File Name\tStarting Block\tNumber of Blocks\n"); 
 // TODO: Implement directory functionality here 
} 
int main() { 
 int n, choice; 
 printf("Enter the number of blocks in the disk: "); 
 scanf("%d", &n); 
 initialize(n); 
 do { 
 printf("\nMenu:\n"); 
 printf("1. Show Bit Vector\n"); 
 printf("2. Create New File\n"); 
 printf("3. Show Directory\n"); 
 printf("4. Exit\n"); 
 printf("Enter your choice: "); 
 scanf("%d", &choice); 
 switch (choice) { 
 case 1: 
 show_bit_vector(n); 
 break; 
 case 2: 
 create_new_file(n); 
 break; 
 case 3: 
 show_directory(n);
break; 
 case 4: 
 printf("Exiting...\n"); 
 break; 
 default: 
 printf("Error: Invalid choice.\n"); 
 break; 
 } 
 } while (choice != 4); 
 return 0; 
}
**************************************************************************************************************************************************************************
Q4) Write a program to simulate linked file allocation method.Assume disk with n number  of blocks. Give value of n as input. Write menu driver program with menu options as mentioned above and implement each option.
-Show Bit Vector
-Create New File
-Show Directory
-Delete File
-Exit


#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

// Define a struct for each file in the directory
typedef struct {
    char name[20];
    int size;
    int start_block;
} File;

int main() {
    int n; // number of blocks on the disk
    int *bit_vector; // array to store the allocation status of each block
    File directory[10]; // array to store up to 10 files in the directory
    int num_files = 0; // number of files currently in the directory
    
    // Ask user for the number of blocks on the disk
    printf("Enter the number of blocks on the disk: ");
    scanf("%d", &n);
    
    // Allocate memory for the bit vector
    bit_vector = (int *)malloc(n * sizeof(int));
    
    // Initialize the bit vector to all zeros
    for (int i = 0; i < n; i++) {
        bit_vector[i] = 0;
    }
    
    // Randomly mark some blocks as allocated
    srand(time(NULL));
    for (int i = 0; i < n/2; i++) {
        int block = rand() % n;
        if (bit_vector[block] == 0) {
            bit_vector[block] = 1;
        }
    }
    
    // Menu driver program
    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Show Bit Vector\n");
        printf("2. Create New File\n");
        printf("3. Show Directory\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch(choice) {
            case 1:
                // Show the bit vector
                printf("Bit Vector:\n");
                for (int i = 0; i < n; i++) {
                    printf("%d ", bit_vector[i]);
                }
                printf("\n");
                break;
            case 2:
                // Create a new file
                if (num_files == 10) {
                    printf("Directory is full.\n");
                    break;
                }
                char name[20];
                int size;
                printf("Enter file name: ");
                scanf("%s", name);
                printf("Enter file size (in blocks): ");
                scanf("%d", &size);
                
                // Find the first free block
                int start_block = -1;
                for (int i = 0; i < n; i++) {
                    if (bit_vector[i] == 0) {
                        start_block = i;
                        break;
                    }
                }
                if (start_block == -1) {
                    printf("No free blocks available.\n");
                    break;
                }
                
                // Allocate the blocks to the file
                for (int i = 0; i < size; i++) {
                    if (start_block + i >= n) {
                        printf("Not enough free blocks.\n");
                        break;
                    }
                    if (bit_vector[start_block + i] == 1) {
                        printf("Block %d is already allocated.\n", start_block + i);
                        break;
                    }
                    bit_vector[start_block + i] = 1;
                }
                
                // Add the file to the directory
                File new_file = {name, size, start_block};
                directory[num_files] = new_file;
                num_files++;
                
                printf("File created successfully.\n");
                break;
            case 3:
                // Show the directory
                if (num_files == 0) {
                    printf("Directory is empty.\n");
                    break;
                }
                printf("Directory:\n");
                for (int i = 0; i < num_files; i++) {
                    printf("%s\t%d\t%d\n", directory[i].name, directory[i].size, directory[i].start_block);
                }
                break;
            case 4:
                // Exit the program
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 4);
    
    free(bit_vector);
    return 0;
}

**************************************************************************************************************************************************************************
Q5) Write a program to simulate Indexed file allocation method.Assume disk with n number  of blocks. Give value of n as input. Write menu driver program with menu options as mentioned above and implement each option.
-Show Bit Vector
-Create New File
-Show Directory
-Delete File
-Exit


#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
#define BLOCK_SIZE 1024 
int *disk; 
int *free_blocks; 
int *index_table; 
int n_blocks; 
void initialize_disk(int n) { 
 /* 
 * Initializes a disk with n number of blocks and randomly marks some blocks as allocated. 
 */ 
 int i; 
 disk = (int *) malloc(n * sizeof(int)); 
 free_blocks = (int *) malloc(n * sizeof(int)); 
 index_table = (int *) calloc(10, sizeof(int)); // Assume we have 10 files to
n_blocks = n; 
 srand(time(NULL)); 
 for (i = 0; i < n; i++) { 
 if ((double) rand() / RAND_MAX < 0.5) { 
 disk[i] = 1; 
 } else { 
 disk[i] = 0; 
 free_blocks[free_blocks[0] + 1] = i; 
 free_blocks[0]++; 
 } 
 } 
} 
void show_bit_vector() { 
 /* 
 * Shows the bit vector for the disk. 
 */ 
 int i, j; 
 printf("Bit Vector:\n"); 
 for (i = 0; i < n_blocks; i += 10) { 
 for (j = i; j < i + 10; j++) { 
 if (j >= n_blocks) { 
 break; 
 } 
 printf("%d ", disk[j]); 
 } 
 printf("\n"); 
 } 
} 
void show_directory() { 
 /* 
 * Shows the directory for the disk. 
 */ 
 int i, j; 
 printf("Directory:\n"); 
 for (i = 0; i < 10; i++) { 
 printf("%d: ", i); 
 for (j = 0; j < index_table[i]; j++) { 
 printf("%d ", index_table[i * BLOCK_SIZE + j]); 
 } 
 printf("\n"); 
 } 
}
void delete_file(int file_index) { 
 /* 
 * Deletes a file from the disk by setting its blocks to free. 
 */ 
 int i, block_index; 
 for (i = 0; i < index_table[file_index]; i++) { 
 block_index = index_table[file_index * BLOCK_SIZE + i]; 
 disk[block_index] = 0; 
 free_blocks[free_blocks[0] + 1] = block_index; 
 free_blocks[0]++; 
 } 
 index_table[file_index] = 0; 
} 
int main() { 
 int choice, file_index; 
 printf("Enter the number of blocks on the disk: "); 
 scanf("%d", &n_blocks); 
 initialize_disk(n_blocks); 
 while (1) { 
 printf("\nMenu:\n"); 
 printf("1. Show Bit Vector\n"); 
 printf("2. Show Directory\n"); 
 printf("3. Delete a File\n"); 
 printf("4. Exit\n"); 
 printf("Enter your choice: "); 
 scanf("%d", &choice); 
 switch (choice) { 
 case 1: 
 show_bit_vector(); 
 break; 
 case 2: 
 show_directory(); 
 break; 
 case 3: 
 printf("Enter the index of the file to delete: "); 
 scanf("%d", &file_index); 
 delete_file(file_index); 
 printf("File %d deleted.\n", file_index); 
 break; 
 case 4:
return 0; 
 default: 
 printf("Invalid choice. Please try again.\n"); 
 break; 
 } 
 } 
}
**************************************************************************************************************************************************************************
Q6) Write an OS program to implement FCFS Disk Scheduling algorithm

include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,n,TotalHeadMoment=0,initial;
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
     scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
    
    // logic for FCFS disk scheduling
    
    for(i=0;i<n;i++)
    {
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
        initial=RQ[i];
    }
    
    printf("Total head moment is %d",TotalHeadMoment);
    return 0;
    
}
**************************************************************************************************************************************************************************
Q7)  Write an OS program to implement SSTF algorithm Disk Scheduling algorithm.


#include <stdio.h>
#include <stdlib.h>
int main(){
    int RQ[100], i, n, TotalHeadMoment = 0, initial, count = 0;
    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    printf("Enter the Requests sequence\n");
    for (i = 0; i < n; i++)
        scanf("%d", &RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d", &initial);
    while (count != n){
        int min = 1000, d, index;
        for (i = 0; i < n; i++){
            d = abs(RQ[i] - initial);
            if (min > d){
                min = d;
                index = i;
            }
        }
        TotalHeadMoment = TotalHeadMoment + min;
        initial = RQ[index];
        RQ[index] = 1000;
        count++;
    }
    printf("Total head movement is %d \n", TotalHeadMoment);
    return 0;
}
**************************************************************************************************************************************************************************
Q8) Write an OS program to implement SCAN Disk Scheduling algorithm.


#include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
     scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
    printf("Enter total disk size\n");
    scanf("%d",&size);
    printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d",&move);
    
    // logic for Scan disk scheduling
    
        /*logic for sort the request array */
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                int temp;
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }

        }
    }

    int index;
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }
   
    // if movement is towards high value
    if(move==1)
    {
        for(i=index;i<n;i++)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        //  last movement for max size 
        TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        initial = size-1;
        for(i=index-1;i>=0;i--)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    // if movement is towards low value
    else
    {
        for(i=index-1;i>=0;i--)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        //  last movement for min size 
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        initial =0;
        for(i=index;i<n;i++)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    
    printf("Total head movement is %d",TotalHeadMoment);
    return 0;
}
**************************************************************************************************************************************************************************
Q9)  Write an OS program to implement C-SCAN algorithm Disk Scheduling algorithm.


#include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
     scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
    printf("Enter total disk size\n");
    scanf("%d",&size);
    printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d",&move);
    
    // logic for C-Scan disk scheduling
    
        /*logic for sort the request array */
    for(i=0;i<n;i++)
    {
        for( j=0;j<n-i-1;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                int temp;
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }

        }
    }

    int index;
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }
   
    // if movement is towards high value
    if(move==1)
    {
        for(i=index;i<n;i++)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        //  last movement for max size 
        TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        /*movement max to min disk */
        TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
        initial=0;
        for( i=0;i<index;i++)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    // if movement is towards low value
    else
    {
        for(i=index-1;i>=0;i--)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }
        //  last movement for min size 
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        /*movement min to max disk */
        TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
        initial =size-1;
        for(i=n-1;i>=index;i--)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    
    printf("Total head movement is %d",TotalHeadMoment);
    return 0;
}
*********************************BAS KAR AUR KITANA NICHE JAYEGA********************************************************************************************************************************************************************

